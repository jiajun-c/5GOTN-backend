syntax = "proto3";
package pb;

//// 传入训练数据请求结构
//message TrainRequest {
//  string file_name = 1;     // 文件名
//  bytes file_content = 2;   // 文件内容
//}

// 训练数据的数据结构，也就是放在数据库中的数据
message Data {
  int32 clogid = 1;         // 日志ID
  int32 calarmcode = 2;     // 告警代码
  int32 cneid = 3;          // 网元ID
  string coccuructime = 4;  // 告警时间
  string ccleaructime = 5;  // 清除告警时间
  string clocationinfo = 6; // 设备定位信息
  string clinport = 7;      // 线路端口字符串
  int32 calarmlevel = 8;    // 设备告警等级
}

// 传入训练数据的数组
message TrainRequest{
  repeated Data trainrequest = 1;
}
// 返回是否成功完成传入
message TrainResponse {
  bool success = 1;         // 响应结果（是否成功）
}

//传入的需要预测的数据结构
message Datainput{
  int32 clogid = 1;
  int32 calarmcode = 2;
  int32 cneid = 3;
  string coccuructime = 4;
  string ccleaructime = 5;//
  string clocationinfo = 6;
  string clinport = 7;
}

// 传入需要进行预测的告警序列
message AlertRequest {
  repeated Datainput datarequest = 1;  // 请求数据
}

// 传出的预测结果序列数据结构
message Dataoutput{
  string clocationinfo = 1;
}

// 预测结果
message AlertResponse {
  repeated Dataoutput dataresponse = 1;  // 返回的数据数组
  bool success = 2;               // 是否成功返回
}

// 传入进行训练信号
message CorrelationAnalysisRequest {
  // 客户端只需要点击“训练”按钮
}

// 返回训练完成标志
message CorrelationAnalysisResponse {
  bool success = 1; //  是否完成训练
}

// 定义服务接口
// 服务的顺序为：1.传入（新增）数据 2.进行训练 3.预测
service core {
  // 传入训练数据
  rpc Train (TrainRequest) returns (TrainResponse) {}
  // 训练
  rpc CorrelationAnalysis (CorrelationAnalysisRequest) returns (CorrelationAnalysisResponse) {}
  // 预测
  rpc Alert (AlertRequest) returns (AlertResponse) {}
}