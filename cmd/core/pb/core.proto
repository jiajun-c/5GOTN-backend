syntax = "proto3";
package pb;

// 传入数据请求结构，文件格式
message TrainRequest {
  string file_name = 1;     // 文件名
  bytes file_content = 2;   // 文件内容
}

// 返回是否成功完成传入
message TrainResponse {
  bool success = 1;         // 响应结果（是否成功）
}

//传入的需要预测的数据结构
message Datainput{
   string clocationinfo = 1; // 设备定位信息
}

// 传入需要进行预测的告警序列
message AlertRequest {
  string model_name = 1;     // 训练完成后的模型名
  bytes model_content = 2;   // 模型内容
  string train_name = 3;     // 训练完成后的训练数据（需要进行预测时使用
  bytes  train_content = 4;
  string loc_name = 5;      //训练完成后的反索引内容
  bytes  loc_content = 6;
  string locToIndexOflocs_name = 7;   //训练完成后的定位信息
  bytes locToIndexOflocs_content =8;
  repeated Datainput datarequest = 9;  // 请求数据
}

// 传出的预测结果序列数据结构
message Dataoutput{
  string clocationinfo = 1;
}

// 预测结果
message AlertResponse {
  repeated Dataoutput dataresponse = 1;  // 返回的数据数组
  string predict_resutlt = 2;            //返回的提示信息
}

// 传入进行训练信号，需要读入文件内容
message CorrelationAnalysisRequest {
  string file_name = 1;     // 文件名
  bytes file_content = 2;   // 文件内容
}

// 返回训练完成返回内容
message CorrelationAnalysisResponse {
  bool success = 1; //  是否完成训练
  string model_name = 2;     // 训练完成后的模型名
  bytes model_content = 3;   // 模型内容
  string train_name = 4;     // 训练完成后的训练数据（需要进行预测时使用
  bytes  train_content = 5;
  string loc_name = 6;      //训练完成后的反索引内容
  bytes  loc_content = 7;
  string locToIndexOflocs_name = 8;   //训练完成后的定位信息
  bytes locToIndexOflocs_content =9;
}

// 定义服务接口
// 服务的顺序为：1.传入（新增）数据 2.进行训练 3.预测
service core {
  // 传入训练数据
  rpc Train (TrainRequest) returns (TrainResponse) {}
  // 训练
  rpc CorrelationAnalysis (CorrelationAnalysisRequest) returns (CorrelationAnalysisResponse) {}
  // 预测
  rpc Alert (AlertRequest) returns (AlertResponse) {}
}